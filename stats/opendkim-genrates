#!/bin/sh
#
# Copyright (c) 2010, 2011, The OpenDKIM Project.  All rights reserved.
#
# $Id: opendkim-genstats,v 1.26 2010/10/27 06:18:45 cm-msk Exp $
#
# Script to generate rate and spam ratio predictions for each domain
# based on accumulated data.  EXPERIMENTAL.

###
### Setup
###

# Command to perform a MySQL query and output HTML
MYSQL_CMD="mysql"

# Database name
DB=${OPENDKIM_DB:-opendkim}

# Database user
USER=${OPENDKIM_USER:-opendkim}

# Database user's password
PASSWORD=${OPENDKIM_PASSWORD:-password}

# Where to write the report
REALOUTPUT=${OPENDKIM_OUTPUT:-/var/www/docs/opendkim/rates.html}
OUTPUT=${REALOUTPUT}.$$

# Prediction parameters
#PISIZE=50
#STDSCORE=0.67
#PISIZE=68
#STDSCORE=1.00
PISIZE=75
STDSCORE=1.15
#PISIZE=90
#STDSCORE=1.64
#PISIZE=95
#STDSCORE=1.96
#PISIZE=99
#STDSCORE=2.58

###
### NO user-serviceable parts beyond this point
###

MYSQL="$MYSQL_CMD --user=$USER --password=$PASSWORD --database=$DB"

# Compute/update message counts and spam ratios for all signing domains
$MYSQL --execute="INSERT IGNORE INTO aggregate (domain, updated, date, messages, spam) SELECT signatures.domain, CURRENT_TIMESTAMP(), DATE(messages.msgtime), COUNT(*), SUM(spam) FROM messages JOIN signatures ON signatures.message = messages.id WHERE NOT spam = -1 AND pass = 1 AND NOT DATE(messages.msgtime) = DATE(CURRENT_TIMESTAMP()) GROUP BY domain, DATE(messages.msgtime)"

# Compute/update message counts and spam ratios for unsigned mail
$MYSQL --execute="INSERT IGNORE INTO aggregate (domain, updated, date, messages, spam) SELECT 0, CURRENT_TIMESTAMP(), DATE(messages.msgtime), COUNT(*), SUM(spam) FROM messages WHERE NOT spam = -1 AND NOT DATE (messages.msgtime) = DATE(CURRENT_TIMESTAMP()) AND (sigcount = 0 OR messages.id NOT IN (SELECT message FROM signatures WHERE pass = 1)) GROUP BY DATE(messages.msgtime)"

# Compute ratios wherever they're missing
$MYSQL --execute="UPDATE aggregate SET ratio = spam / messages WHERE ratio IS NULL"

# Compute predictions
$MYSQL --execute="INSERT INTO predictions (domain, rate_samples, rate_max, rate_avg, rate_stddev, rate_high, ratio_max, ratio_avg, ratio_stddev, ratio_high, daily_limit_low, daily_limit_high) SELECT domain, COUNT(aggregate.messages), MAX(aggregate.messages), AVG(aggregate.messages), STDDEV_POP(aggregate.messages), AVG(aggregate.messages) + STDDEV_POP(aggregate.messages) * $STDSCORE, MAX(aggregate.ratio), AVG(aggregate.ratio), STDDEV_POP(aggregate.ratio), AVG(aggregate.ratio) + STDDEV_POP(aggregate.ratio) * $STDSCORE, (AVG(aggregate.messages) + STDDEV_POP(aggregate.messages) * $STDSCORE) * (1 - (AVG(aggregate.ratio) + STDDEV_POP(aggregate.ratio) * $STDSCORE)), (AVG(aggregate.messages) + STDDEV_POP(aggregate.messages) * $STDSCORE) * (1 - (AVG(aggregate.ratio) - STDDEV_POP(aggregate.ratio) * $STDSCORE)) FROM aggregate GROUP BY domain ON DUPLICATE KEY UPDATE rate_samples = VALUES(rate_samples), rate_max = VALUES(rate_max), rate_avg = VALUES(rate_avg), rate_stddev = VALUES(rate_stddev), rate_high = VALUES(rate_high), ratio_max = VALUES(ratio_max), ratio_avg = VALUES(ratio_avg), ratio_stddev = VALUES(ratio_stddev), ratio_high = VALUES(ratio_high), daily_limit_low = VALUES(daily_limit_low), daily_limit_high = VALUES(daily_limit_high)"

###
### Generate a report
###

# output a header
cat > $OUTPUT << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
  <head>
   <title>
    OpenDKIM Rate Recommendations
   </title>
  </head>

  <body>
EOF

echo "<h1>OpenDKIM Rate Recommendations generated at `date` </h1>" >> $OUTPUT
echo "<hr>" >> $OUTPUT
echo "$PISIZE% prediction interval, standard score $STDSCORE" >> $OUTPUT

$MYSQL --html --execute="SELECT domains.name, rate_avg, rate_max, rate_stddev, rate_high, ratio_avg, ratio_max, ratio_stddev, ratio_high, daily_limit_low, daily_limit_high FROM predictions LEFT OUTER JOIN domains ON predictions.domain = domains.id WHERE domain IN (13, 22, 127, 205, 309, 418, 450, 795, 22199, 144284, 313943, 0)" >> $OUTPUT

echo "<br>" >> $OUTPUT

echo "Analysis of low-time domain behaviour (<= 15 days, >= 10 msgs), all sites reporting" >> $OUTPUT
$MYSQL --html --execute="SELECT AVG(counts.c) AS rate_avg, MAX(counts.c) as rate_max, STDDEV_POP(counts.c) AS rate_stddev, AVG(counts.s) AS ratio_avg, MAX(counts.s) as ratio_max, STDDEV_POP(counts.s) AS ratio_stddev, AVG(counts.c) + STDDEV_POP(counts.c) * $STDSCORE - AVG(counts.s) - STDDEV_POP(counts.s) * $STDSCORE AS daily_limit_low, AVG(counts.c) + STDDEV_POP(counts.c) * $STDSCORE - AVG(counts.s) + STDDEV_POP(counts.s) * $STDSCORE AS daily_limit_high FROM (SELECT COUNT(*) AS c, SUM(spam) AS s FROM messages JOIN signatures ON signatures.message = messages.id JOIN domains ON signatures.domain = domains.id WHERE NOT spam = -1 AND domains.firstseen >= DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 15 DAY) AND pass = 1 GROUP BY signatures.domain, DATE(msgtime) HAVING COUNT(*) >= 10) counts" >> $OUTPUT

echo "<br>" >> $OUTPUT

echo "Analysis of low-time domain behaviour (<= 15 days, >= 5 msgs), blackops.org only" >> $OUTPUT
$MYSQL --html --execute="SELECT AVG(counts.c) AS rate_avg, MAX(counts.c) rate_max, STDDEV_POP(counts.c) AS rate_stddev, AVG(counts.s) AS ratio_avg, MAX(counts.s) AS ratio_max, STDDEV_POP(counts.s) AS ratio_stddev, AVG(counts.c) + STDDEV_POP(counts.c) * $STDSCORE - AVG(counts.s) - STDDEV_POP(counts.s) * $STDSCORE AS daily_limit_low, AVG(counts.c) + STDDEV_POP(counts.c) * $STDSCORE - AVG(counts.s) + STDDEV_POP(counts.s) * $STDSCORE AS daily_limit_high FROM (SELECT COUNT(*) AS c, SUM(spam) AS s FROM messages JOIN signatures ON signatures.message = messages.id JOIN domains ON signatures.domain = domains.id WHERE NOT spam = -1 AND reporter = 11 AND domains.firstseen >= DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 15 DAY) AND pass = 1 GROUP BY signatures.domain, DATE(msgtime) HAVING COUNT(*) >= 5) counts" >> $OUTPUT

echo "<br>" >> $OUTPUT

echo "Analysis of high spam domain duration (>= 75% spam, >= 2 msgs)" >> $OUTPUT
$MYSQL --html --execute="SELECT COUNT(*) AS domains, MIN(l) AS 'min duration', MAX(l) AS 'max duration', AVG(l) AS 'mean duration', STDDEV_POP(l) AS 'duration stddev' FROM (SELECT COUNT(*) AS c, SUM(messages.spam)/COUNT(*) AS r, DATEDIFF(MAX(messages.msgtime), MIN(messages.msgtime)) AS l FROM signatures JOIN messages ON signatures.message = messages.id WHERE NOT spam = -1 AND pass = 1 GROUP BY signatures.domain) t1 WHERE r > 0.75 AND c > 2" >> $OUTPUT

cat >> $OUTPUT << EOF
  </body>
</html>
EOF

# all done!
mv $OUTPUT $REALOUTPUT
exit 0
