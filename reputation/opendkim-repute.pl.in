#!/usr/bin/perl
#
# Copyright (c) 2011, The OpenDKIM Project.  All rights reserved.
#
# $Id: opendkim-genstats,v 1.26 2010/10/27 06:18:45 cm-msk Exp $
#
# Script to regenerate REPUTE files.  This will eventually be replaced by
# some MySQL-aware PHP.  
# EXPERIMENTAL.

###
### Setup
###

use strict;
use warnings;

use DBI;
use File::Basename;
use Getopt::Long;
use IO::Handle;
use Sys::Hostname;
use POSIX;

require DBD::mysql;

# general
my $progname      = basename($0);
my $version       = "\@VERSION@";
my $verbose       = 0;
my $helponly      = 0;
my $showversion   = 0;

my $out;
my $path;
my $domain;

my $dbi_h;
my $dbi_repute;
my $dbi_a;

# DB parameters
my $def_dbhost    = "localhost";
my $def_dbname    = "opendkim";
my $def_dbuser    = "opendkim";
my $def_dbpasswd  = "opendkim";
my $def_dbport    = "3306";
my $def_outdir    = "/var/www/docs/repute/email";
my $def_assert    = "sends-spam";
my $def_hostname  = hostname;
my $dbhost;
my $dbname;
my $dbuser;
my $dbpasswd;
my $dbport;
my $outdir;
my $assertion;
my $hostname;

my $dbscheme     = "mysql";

my @domains = (	"blackops.org",
		"opendkim.org",
		"gmail.com",
		"yahoo.com",
		"elandsys.com" );

###
### NO user-serviceable parts beyond this point
###

sub usage
{
	print STDERR "$progname: usage: $progname [options]\n";
	print STDERR "\t--assertion=string REPUTE assertion [$def_assert]\n";
	print STDERR "\t--dbhost=host      database host [$def_dbhost]\n";
	print STDERR "\t--dbname=name      database name [$def_dbname]\n";
	print STDERR "\t--dbpasswd=passwd  database password [$def_dbpasswd]\n";
	print STDERR "\t--dbport=port      database port [$def_dbport]\n";
	print STDERR "\t--dbuser=user      database user [$def_dbuser]\n";
	print STDERR "\t--directory=path   output directory [$def_outdir]\n";
	print STDERR "\t--help             print help and exit\n";
	print STDERR "\t--rater=name       rater's name [$def_hostname]\n";
	print STDERR "\t--verbose          verbose output\n";
	print STDERR "\t--version          print version and exit\n";
}

# parse command line arguments
my $opt_retval = &Getopt::Long::GetOptions ('assertion=s' => \$assertion,
                                            'dbhost=s' => \$dbhost,
                                            'dbname=s' => \$dbname,
                                            'dbpasswd=s' => \$dbpasswd,
                                            'dbport=s' => \$dbport,
                                            'dbuser=s' => \$dbuser,
                                            'directory=s' => \$outdir,
                                            'help!' => \$helponly,
                                            'rater=s' => \$hostname,
                                            'verbose!' => \$verbose,
                                            'version!' => \$showversion,
                                           );

if (!$opt_retval || $helponly)
{
	usage();

	if ($helponly)
	{
		exit(0);
	}
	else
	{
		exit(1);
	}
}

if ($showversion)
{
	print STDOUT "$progname v$version\n";
	exit(0);
}

# apply defaults
if (!defined($dbhost))
{
	if (defined($ENV{'OPENDKIM_DBHOST'}))
	{
		$dbhost = $ENV{'OPENDKIM_DBHOST'};
	}
	else
	{
		$dbhost = $def_dbhost;
	}
}

if (!defined($dbname))
{
	if (defined($ENV{'OPENDKIM_DB'}))
	{
		$dbname = $ENV{'OPENDKIM_DB'};
	}
	else
	{
		$dbname = $def_dbname;
	}
}

if (!defined($dbpasswd))
{
	if (defined($ENV{'OPENDKIM_PASSWORD'}))
	{
		$dbpasswd = $ENV{'OPENDKIM_PASSWORD'};
	}
	else
	{
		$dbpasswd = $def_dbpasswd;
	}
}

if (!defined($dbport))
{
	if (defined($ENV{'OPENDKIM_PORT'}))
	{
		$dbport = $ENV{'OPENDKIM_PORT'};
	}
	else
	{
		$dbport = $def_dbport;
	}
}

if (!defined($dbuser))
{
	if (defined($ENV{'OPENDKIM_USER'}))
	{
		$dbuser = $ENV{'OPENDKIM_USER'};
	}
	else
	{
		$dbuser = $def_dbuser;
	}
}

if (!defined($assertion))
{
	if (defined($ENV{'OPENDKIM_ASSERTION'}))
	{
		$assertion = $ENV{'OPENDKIM_ASSERTION'};
	}
	else
	{
		$assertion = $def_assert;
	}
}

if (!defined($outdir))
{
	if (defined($ENV{'OPENDKIM_OUTPUT'}))
	{
		$outdir = $ENV{'OPENDKIM_OUTPUT'};
	}
	else
	{
		$outdir = $def_outdir;
	}
}

if (!defined($hostname))
{
	if (defined($ENV{'OPENDKIM_RATER'}))
	{
		$hostname = $ENV{'OPENDKIM_RATER'};
	}
	else
	{
		$hostname = $def_hostname;
	}
}
my $dbi_dsn = "DBI:" . $dbscheme . ":database=" . $dbname .
              ";host=" . $dbhost . ";port=" . $dbport;

$dbi_h = DBI->connect($dbi_dsn, $dbuser, $dbpasswd, { PrintError => 0 });
if (!defined($dbi_h))
{
	print STDERR "$progname: unable to connect to database: $DBI::errstr\n";
	exit(1);
}

if ($verbose)
{
	print STDERR "$progname: connected to database\n";
}

#
# Extract the latest SENDS-SPAM assertion for domains of interest
#
if ($verbose)
{
	print STDERR "$progname: generating REPUTE files for interesting domains\n";
}

$dbi_repute = $dbi_h->prepare("SELECT ratio_high, rate_samples, UNIX_TIMESTAMP(updated) FROM predictions WHERE name = ?");

foreach $domain (@domains)
{
	if ($verbose)
	{
		print STDERR "$progname: updating for domain $domain\n";
	}

	if (!$dbi_repute->execute("$domain"))
	{
		print STDERR "$progname: SELECT failed: " . $dbi_h->errstr;
		$dbi_repute->finish;
		$dbi_h->disconnect;
		exit(1);
	}

	$dbi_a = $dbi_repute->fetchrow_arrayref();
	if (!defined($dbi_a))
	{
		print STDERR "$progname: fetchrow_arrayref() failed\n";
		$dbi_repute->finish;
		$dbi_h->disconnect;
		exit(1);
	}

	$path = $outdir . "/" . $domain;
	if (! -d $path)
	{
		unless (mkdir($path))
		{
			print STDERR "$progname: $path: mkdir(): $!\n";
			$dbi_repute->finish;
			$dbi_h->disconnect;
			exit(1);
		}
	}

	$path = $outdir . "/" . $domain . "/" . $assertion;
	unless (open($out, ">", $path))
	{
		print STDERR "$progname: $path: open(): $!\n";
		$dbi_repute->finish;
		$dbi_h->disconnect;
		exit(1);
	}

	print $out "<reputation>\n";
	print $out " <reputon>\n";
	print $out "  <rater>$hostname</rater>\n";
	print $out "  <rater-authenticity>1</rater-authenticity>\n";
	print $out "  <assertion>$assertion</assertion>\n";
	print $out "  <extension>IDENTITY: DKIM</extension>\n";
	print $out "  <rated>$domain</rated>\n";
	print $out "  <rating>$dbi_a->[0]</rating>\n";
	print $out "  <sample-size>$dbi_a->[1]</sample-size>\n";
	print $out "  <updated>$dbi_a->[2]</updated>\n";
	print $out " </reputon>\n";
	print $out "</reputation>\n";

	close $out;

	$dbi_repute->finish;
}

# all done!
if ($verbose)
{
	print STDERR "$progname: terminating\n";
}

$dbi_repute->finish;
$dbi_h->disconnect;

exit(0);
